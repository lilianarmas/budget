{"version":3,"sources":["components/Message.js","components/FormBudget.js","components/FormExpense.js","components/Expense.js","components/ListExpenses.js","helpers.js","components/Budget.js","App.js","serviceWorker.js","index.js"],"names":["Message","message","className","FormBudget","setBudget","setRemaining","setShowFormBudget","useState","quantity","setQuantity","error","setError","onSubmit","e","preventDefault","isNaN","type","placeholder","onChange","parseInt","target","value","FormExpense","setExpense","setCreateExpense","name","setName","trim","expense","id","shortid","generate","Expense","ListExpenses","expenses","map","key","controlBudget","budget","remaining","Budget","App","showFormBudget","setExpenses","createExpense","useEffect","substractBudget","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.08819716.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Message = ({ message }) => (\n\n    <p className=\"alert alert-danger error\">{message}</p>\n);\n\nMessage.propTypes = {\n    message: PropTypes.string.isRequired\n}\n\nexport default Message;\n","import React, { Fragment, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Message from './Message';\n\nconst FormBudget = ({ setBudget, setRemaining, setShowFormBudget }) => {\n\n    // definir el state\n    const [ quantity, setQuantity ] = useState(0);\n    const [ error, setError ] = useState(false);\n\n    const saveQuantity = e => {\n        setQuantity(parseInt(e.target.value, 10));\n    }\n\n    const saveBudget = e => {\n        e.preventDefault();\n\n        // validar\n        if(quantity <= 0 || isNaN(quantity)) {\n            setError(true);\n            return;\n        }\n\n        // guardar\n        setError(false);\n        setBudget(quantity);\n        setRemaining(quantity);\n        setShowFormBudget(false);\n    }\n\n    return (\n        <Fragment>\n            <h2>Coloca tu presupuesto</h2>\n\n            { error ? <Message message=\"Error Presupuesto Invalido\"/> : null }\n\n            <form\n                onSubmit={saveBudget}\n            >\n                <input\n                    type=\"number\"\n                    className=\"u-full-width\"\n                    placeholder=\"Coloca tu presupuesto\"\n                    onChange={saveQuantity}\n                />\n\n                <input\n                    type=\"submit\"\n                    className=\"button-primary u-full-width\"\n                />\n            </form>\n        </Fragment>\n    );\n}\n\nFormBudget.propTypes = {\n    setBudget: PropTypes.func.isRequired,\n    setRemaining: PropTypes.func.isRequired,\n    setShowFormBudget: PropTypes.func.isRequired\n}\n\nexport default FormBudget;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Message from './Message';\nimport shortid from 'shortid';\n\nconst FormExpense = ({ setExpense, setCreateExpense }) => {\n\n    const [ name, setName ] = useState('');\n    const [ quantity, setQuantity ] = useState(0);\n    const [ error, setError ] = useState(null);\n\n    const saveExpense = e => {\n        e.preventDefault();\n\n        // validar\n        if(name.trim() === '') {\n            setError('Ingrese el nombre del gasto');\n            return;\n        }\n        if(quantity <= 0 || isNaN(quantity)) {\n            setError('Gasto incorrecto');\n            return;\n        }\n\n        setError(null);\n\n        // construir el gasto\n        const expense = {\n            name,\n            quantity,\n            id: shortid.generate()\n        }\n\n        // pasar el gasto al componente principal\n        setExpense(expense);\n        setCreateExpense(true);\n\n        // resetear el formulario\n        setName('');\n        setQuantity(0);\n    }\n\n    return (\n        <form\n            onSubmit={saveExpense}\n        >\n            <h2>Agrega tus gastos aqu√≠</h2>\n\n            { error ? <Message message={error} /> : null}\n\n            <div className=\"campo\">\n                <label>Nombre Gasto</label>\n                <input\n                    type=\"text\"\n                    className=\"u-full-width\"\n                    placeholder=\"Ej. Transporte\"\n                    value={name}\n                    onChange={e => setName(e.target.value)}\n                />\n            </div>\n\n            <div className=\"campo\">\n                <label>Cantidad Gasto</label>\n                <input\n                    type=\"number\"\n                    className=\"u-full-width\"\n                    placeholder=\"Ej. 700\"\n                    value={quantity}\n                    onChange={e => setQuantity(e.target.value && !isNaN(e.target.value) ? parseInt(e.target.value, 10) : '')}\n                />\n            </div>\n\n            <input\n                type=\"submit\"\n                className=\"button-primary u-full-width\"\n                value=\"Agregar Gasto\"\n            />\n        </form>\n    );\n}\n\nFormExpense.propTypes = {\n    setExpense: PropTypes.func.isRequired,\n    setCreateExpense: PropTypes.func.isRequired\n}\n\nexport default FormExpense;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Expense = ({ expense }) => (\n    <li>\n        <p>\n            {expense.name}\n\n            <span className=\"expense\">$ {expense.quantity}</span>\n        </p>\n    </li>\n)\n\nExpense.propTypes = {\n    expense: PropTypes.object.isRequired\n}\n\nexport default Expense;\n","import React from 'react';\nimport Expense from './Expense';\nimport PropTypes from 'prop-types';\n\nconst ListExpenses = ({ expenses }) => (\n    <div className=\"expenses-incurred\">\n        <h2>Listado</h2>\n        {expenses && expenses.map(expense => (\n            <Expense\n                key={expense.id}\n                expense={expense}\n            />\n        ))}\n    </div>\n)\n\nListExpenses.propTypes = {\n    expenses: PropTypes.array.isRequired\n}\n \nexport default ListExpenses;\n","export const controlBudget = (budget, remaining) => {\n    let classAlert;\n\n    if((budget / 4) > remaining) {\n        classAlert = 'alert alert-danger';\n    } else if ((budget / 2) > remaining) {\n        classAlert = 'alert alert-warning';\n    } else {\n        classAlert = 'alert alert-success';\n    }\n\n    return classAlert;\n}\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { controlBudget } from '../helpers';\n\nconst Budget = ({ budget, remaining }) => {\n    return (\n        <Fragment>\n            <div className=\"alert alert-primary\">\n                Presupuesto: $ {budget}\n            </div>\n            <div className={controlBudget(budget, remaining)}>\n                Restante: $ {remaining}\n            </div>\n        </Fragment>\n    );\n}\n\nBudget.propTypes = {\n    budget: PropTypes.number.isRequired,\n    remaining: PropTypes.number.isRequired\n}\n \nexport default Budget;\n","import React, { useState, useEffect } from 'react';\nimport FormBudget from './components/FormBudget';\nimport FormExpense from './components/FormExpense';\nimport ListExpenses from './components/ListExpenses';\nimport Budget from './components/Budget';\n\nfunction App() {\n\n    // definir presupuesto\n    const [ budget, setBudget ] = useState(0);\n    const [ remaining, setRemaining ] = useState(0);\n    const [ showFormBudget, setShowFormBudget ] = useState(true);\n    const [ expenses, setExpenses ] = useState([]);\n    const [ expense, setExpense ] = useState({});\n    const [ createExpense, setCreateExpense ] = useState(false);\n\n    // Actualizar el restante\n    useEffect(() => {\n\n        // agregar nuevo gasto\n        if(createExpense) {\n            setExpenses([\n                ...expenses,\n                expense\n            ]);\n\n            // resta del presupuesto actual\n            const substractBudget = remaining - expense.quantity;\n            setRemaining(substractBudget);\n\n            // resetar a false\n            setCreateExpense(false);\n        }\n\n    }, [ createExpense, expense, expenses, remaining ]);\n\n    return (\n        <div className=\"container\">\n            <header>\n                <h1>Gasto Semanal</h1>\n\n                <div className=\"content-main content\">\n\n                    { showFormBudget ? (\n                        <FormBudget\n                            setBudget={setBudget}\n                            setRemaining={setRemaining}\n                            setShowFormBudget={setShowFormBudget}\n                        />\n                    )\n                    : (\n                        <div className=\"row\">\n                            <div className=\"one-half column\">\n                                <FormExpense\n                                    setExpense={setExpense}\n                                    setCreateExpense={setCreateExpense}\n                                />\n                            </div>\n\n                            <div className=\"one-half column\">\n                                <ListExpenses\n                                    expenses={expenses}\n                                />\n\n                                <Budget\n                                    budget={budget}\n                                    remaining={remaining}\n                                />\n                            </div>\n                        </div>\n                    )}\n\n                </div>\n            </header>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}